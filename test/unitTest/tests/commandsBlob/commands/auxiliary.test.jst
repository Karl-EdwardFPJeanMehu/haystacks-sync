'use strict';
import { crandomlyGenerateEitherMixedCaseLetterOrNumberOrSpecialCharacter } from "@haystacks/constants/src/constants/business.constants.js";
/**
 * @file auxiliary.test.js
 * @module auxiliary.test
 * @description Unit tests for the auxiliary.js
 * @requires module:auxiliary
 * @requires module:test.constants
 * @requires {@link https://www.npmjs.com/package/@haystacks/constants|@haystacks/constants}
 * @requires {@link https://www.npmjs.com/package/jest|jest}
 * @requires {@link https://www.npmjs.com/package/path|path}
 * @author Json Howard
 * @date 2023/05/08
 * @copyright Copyright © 2023-… by Json Howard. All rights reserved
 */

// Internal imports
import auxiliary from "../../../../../src/commandsBlob/commands/auxiliary";
import D from "../../../../../src/structures/data.js";
import rulesLibrary from "../../../../../src/businessRules/rulesLibrary.js";
import * as tst_con from '../../constants/test.constants.js';

// External imports
import hayConst from '@haystacks/constants';
import { beforeAll, beforeEach, describe, expect, jest } from '@jest/globals';

const { bas, msg, sys, wrd, num } = hayConst;

/**
 * @function convertColors
 * @description Tests the positive and negative test cases of the convertColors
 * @date 2023/05/08
 */
describe(tst_con.cconvertColors, () => {
    /**
     * @function convertColors_validDataString
     * @description Tests the business rules function convertColors with a valid input.
     * @author Json Howard
     * @date 2023/05/08
     */
    test(tst_con.cconvertColors_validDataString, () => {
      // Arrange
      let inputData = ["converters", "wrkflo"];
      let inputMetaData = "";
  
      // Act
      rulesLibrary.initRulesLibrary();
      let returnData = auxiliary.convertColors(
        inputData,
        inputMetaData
      );
  
      // Assert
      expect(returnData).toBe(); //[true, true]
    });
});