description: Test plan for stringGeneration.js


--------------------------------------------------------------------------------
testName: generateRandomMixedCaseTextByLength_validDataString
input inputData: string (The string that contains a number or how many randomly generated mixed case alphabetic characters should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated mixed case letters where the length of the string is defined by the input parameter.)

testName: generateRandomMixedCaseTextByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomMixedCaseTextByLength_inValidDataInputMetaDataString
input inputData: string (The string that contains a number or how many randomly generated mixed case alphabetic characters should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomMixedCaseTextByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseTextByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseTextByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomMixedCaseTextByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomUpperCaseTextByLength_validDataString
input inputData: string (The string that contains a number for how many randomly generated upper case english alphabetic characters should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated upper case letters where the length of the string is defined by the input parameter)

testName: generateRandomUpperCaseTextByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomUpperCaseTextByLength_inValidDataInputMetaDataString
input inputData: string (The string that contains a number for how many randomly generated upper case english alphabetic characters should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomUpperCaseTextByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseTextByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseTextByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomUpperCaseTextByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomLowerCaseTextByLength_validDataString
input inputData: string (The string that contains a number for how many randomly generated lower case english alphabetic characters that should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated lower case letters where the length of the string is defined by the input parameter)

testName: generateRandomLowerCaseTextByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomLowerCaseTextByLength_inValidDataInputMetaDataString
input inputData: string (The string that contains a number for how many randomly generated lower case english alphabetic characters that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomLowerCaseTextByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseTextByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseTextByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomLowerCaseTextByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated mixed case letters and/or special characters to generate the output string)
input inputMetaData: string (The ist of special characters that should be used during the generation process)
output: string (A string of randomly generated mixed case letters and special characters where the length of the string is defined by the input parameter)

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The ist of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated mixed case letters and/or special characters to generate the output string) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomMixedCaseTextWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated upper case english letters and/or special characters to generate)
input inputMetaData: string (The list of special characters that should be used during the generate process)
output: string (A string of randomly generated upper case english letters and special characters where the length of the string is defined by the input parameter)

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generate process) (testDataString)
output: ?

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated upper case english letters and/or special characters to generate) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomUpperCaseTextWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated lower case letters and/or special characters to generate)
input inputMetaData: string (The list of special characters that should be used during the generation process)
output: string (A string of randomly generated lower case english letters and special characters where the length of the string is defined by the input parameter)

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated lower case letters and/or special characters to generate) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomLowerCaseTextWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomMixedCaseAlphaNumericCodeByLength_validDataString
input inputData: string (The number of randomly generated mixed case letters and/or numbers that should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated mixed case english letters and numbers where the length of the string is defined by the input parameter)

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated mixed case letters and/or numbers that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomUpperCaseAlphaNumericCodeByLength_validDataString
input inputData: string (The string that contains a number for how many randomly generated upper case english letters and/or numbers that should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated upper case english letters and numbers where the length of the string is defined by the input parameter)

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidDataInputMetaDataString
input inputData: string (The string that contains a number for how many randomly generated upper case english letters and/or numbers that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomLowerCaseAlphaNumericCodeByLength_validDataString
input inputData: string (The number of randomly generated lower case letters and/or numbers that should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated lower case english letters and numbers where the length of the string is defined by the input parameter)

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated lower case letters and/or numbers that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomNumericCodeByLength_validDataString
input inputData: string (The number of randomly generated numeric characters that should be generated)
input inputMetaData: string (Not used for this business rule)
output: string (A string of randomly generated numeric characters where the length of the string is defined by the input parameter)

testName: generateRandomNumericCodeByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateRandomNumericCodeByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated numeric characters that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomNumericCodeByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomNumericCodeByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomNumericCodeByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomNumericCodeByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated english letters, numeric characters and special characters that should  be generated)
input inputMetaData: string (The list of special characters that should be used during the generation process)
output: string (A string of randomly generated mixed case alpha numeric characters, and special characters where the length of the string is defined by the input parameter)

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated english letters, numeric characters and special characters that should  be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomMixedCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated upper case english letters, numeric characters and special characters that should be generated)
input inputMetaData: string (The list of special characters that should be used during the generation process)
output: string (A string of randomly generated upper case alpha numeric characters, and special characters where the length of the string is defined as one of the input parameters)

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated upper case english letters, numeric characters and special characters that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomUpperCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_validDataString
input inputData: string (The number of randomly generated lower case english letters, numeric characters adn special characters that should be generated)
input inputMetaData: string (The list of special characters that should be used during the generation process)
output: string (A string of randomly generated lower case alpha numeric characters, and special characters where the length of the string is defined as one of the input parameters)

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated lower case english letters, numeric characters adn special characters that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomLowerCaseAlphaNumericCodeWithSpecialCharactersByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: generateRandomSpecialCharacterCodeByLength_validDataString
input inputData: string (The number of randomly generated special characters that should be generated)
input inputMetaData: string (The list of special characters that should be used during the generation process)
output: string (A string of randomly generated characters from the list of allowable special characters that are passed in where the length of the string is defined as one of the input parameters)

testName: generateRandomSpecialCharacterCodeByLength_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The list of special characters that should be used during the generation process) (testDataString)
output: ?

testName: generateRandomSpecialCharacterCodeByLength_inValidDataInputMetaDataString
input inputData: string (The number of randomly generated special characters that should be generated) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateRandomSpecialCharacterCodeByLength_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomSpecialCharacterCodeByLength_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateRandomSpecialCharacterCodeByLength_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateRandomSpecialCharacterCodeByLength_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------generateValidEmail
testName: generateValidEmail_validDataString
input inputData: string (The string that contains the number of characters to generate)
input inputMetaData: array<boolean,string,string> (An array map with multiple input parameters)
output: string (A string of randomly generated mixed case alpha numeric characters and optionally special characters where the length of the string is also defined as one of the input parameters, formatted as an email: a@b.com")

testName: generateValidEmail_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<boolean,string,string> (An array map with multiple input parameters) (testDataString)
output: ?

testName: generateValidEmail_inValidDataInputMetaDataString
input inputData: string (The string that contains the number of characters to generate) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateValidEmail_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateValidEmail_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateValidEmail_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateValidEmail_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?

testName: generateValidEmail_inValidInputMetaDataUndefined
input inputData: string (The string that contains the number of characters to generate) (inValidDataToStoreUndefined)
input inputMetaData: undefined
output: ?

testName: generateValidEmail_inValidInputMetaDataNaN
input inputData: string (The string that contains the number of characters to generate) (inValidDataToStoreNaN)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------generateInvalidEmail
testName: generateInvalidEmail_validDataString
input inputData: string (The string that contains the number of characters to generate)
input inputMetaData: array<boolean,string,string> (An array map with multiple input parameters)
output: string (A string of randomly generated mixed case alpha numeric characters and optionally special characters where the length of the string
 is also defined as one of the input parameters, formatted as an email: "a@b.com")

testName: generateInvalidEmail_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<boolean,string,string> (An array map with multiple input parameters) (testDataString)
output: ?

testName: generateInvalidEmail_inValidDataInputMetaDataString
input inputData: string (The string that contains the number of characters to generate) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateInvalidEmail_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateInvalidEmail_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateInvalidEmail_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateInvalidEmail_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?

testName: generateInvalidEmail_inValidInputMetaDataUndefined
input inputData: string (The string that contains the number of characters to generate) (inValidDataToStoreUndefined)
input inputMetaData: undefined
output: ?

testName: generateInvalidEmail_inValidInputMetaDataNaN
input inputData: string (The string that contains the number of characters to generate) (inValidDataToStoreNaN)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------generateValidEmailWithSpecificSuffixAndDomainName
testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_validData
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: string (A string of randomly generated mixed case alpha numeric characters and optionally special characters where the length of the string is also defined as one of the input
 parameters, formatted as an email: "a@b.com)

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateString
input numberOfCharactersToGenerate: string (464gsdsfae8f46)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: string (464gsdsfae8f46)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (464gsdsfae8f46)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (464gsdsfae8f46)
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateNumber
input numberOfCharactersToGenerate: integer (546)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateBoolean
input numberOfCharactersToGenerate: boolean (false)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: integer (546)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (false)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: integer (546)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: boolean (false)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: undefined
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: NaN
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol in the email being generated, example: "Yahoo.com")
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: integer (546)
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: boolean (false)
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: undefined
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: NaN
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidAllUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: undefined
input specifiedSuffixAndDomain: undefined
output: false?

testName: generateValidEmailWithSpecificSuffixAndDomainNamegenerateValidEmailWithSpecificSuffixAndDomainName_inValidAllNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: NaN
input specifiedSuffixAndDomain: NaN
output: false?
--------------------------------------------------------------------------------generateRandomValidEmail
testName: generateRandomValidEmail_validData
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: string (A string of randomly generated  mixed case alpha numeric characters adn optionally special characters where the length of the string is also defined 
as one of the input parameters, formatted as an email "a@b.com")

testName: generateRandomValidEmail_inValidnumberOfCharactersToGenerateString
input numberOfCharactersToGenerate: string (464gsdsfae8f46)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidgenerateSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: string (464gsdsfae8f46)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidallowableSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (464gsdsfae8f46)
output: false?

testName: generateRandomValidEmail_inValidspecifiedSuffixAndDomainString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (464gsdsfae8f46)
output: false?

testName: generateRandomValidEmail_inValidnumberOfCharactersToGenerateNumber
input numberOfCharactersToGenerate: integer (546)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidnumberOfCharactersToGenerateBoolean
input numberOfCharactersToGenerate: boolean (false)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidnumberOfCharactersToGenerateUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidnumberOfCharactersToGenerateNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidgenerateSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: integer (546)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidgenerateSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (false)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidgenerateSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidgenerateSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only sued if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomValidEmail_inValidallowableSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: integer (546)
output: false?

testName: generateRandomValidEmail_inValidallowableSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: boolean (false)
output: false?

testName: generateRandomValidEmail_inValidallowableSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: undefined
output: false?

testName: generateRandomValidEmail_inValidallowableSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: NaN
output: false?

testName: generateRandomValidEmail_inValidAllUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: undefined
output: false?

testName: generateRandomValidEmail_inValidAllNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: NaN
output: false?
--------------------------------------------------------------------------------generateInvalidEmailWithSpecificSuffixAndDomainName
testName: generateInvalidEmailWithSpecificSuffixAndDomainName_validData
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: string (A string of randomly generated mixed case alpha numeric characters and optionally special characters where the length of the string is also defined
 as one of the input parameters, formatted as an email "a@b.com")

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateString
input numberOfCharactersToGenerate: string (464gsdsfae8f46)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: string (464gsdsfae8f46)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (464gsdsfae8f46)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (464gsdsfae8f46)
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateNumber
input numberOfCharactersToGenerate: integer (546)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateBoolean
input numberOfCharactersToGenerate: boolean (false)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidnumberOfCharactersToGenerateNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: integer (546)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (false)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidgenerateSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: integer (546)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: boolean (false)
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: undefined
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidallowableSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: NaN
input specifiedSuffixAndDomain: string (The specified suffix and domain to use after the "@" symbol n the email being generated, example: "Yahoo.com")
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: integer (546)
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: boolean (false)
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: undefined
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidspecifiedSuffixAndDomainNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters fro the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input specifiedSuffixAndDomain: NaN
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidAllUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: undefined
input specifiedSuffixAndDomain: undefined
output: false?

testName: generateInvalidEmailWithSpecificSuffixAndDomainName_inValidAllNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: NaN
input specifiedSuffixAndDomain: NaN
output: false?
--------------------------------------------------------------------------------generateRandomInvalidEmail
testName: generateRandomInvalidEmail_validData
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: string (data set from numberOfCharactersToGenerate and dataToMerge)

testName: generateRandomInvalidEmail_inValidnumberOfCharactersToGenerateString
input numberOfCharactersToGenerate: string (464gsdsfae8f46)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidgenerateSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: string (464gsdsfae8f46)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidallowableSpecialCharactersString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (464gsdsfae8f46)
output: false?

testName: generateRandomInvalidEmail_inValidDataToMergeString
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
input dataToMerge: string (464gsdsfae8f46)
output: false?

testName: generateRandomInvalidEmail_inValidnumberOfCharactersToGenerateNumber
input numberOfCharactersToGenerate: integer (546)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidnumberOfCharactersToGenerateBoolean
input numberOfCharactersToGenerate: boolean (false)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidnumberOfCharactersToGenerateUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidnumberOfCharactersToGenerateNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidgenerateSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: integer (546)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidgenerateSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (false)
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidgenerateSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidgenerateSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: string (The list of allowable special characters as a string, only used if the {@code generateSpecialCharacters} boolean value is set to {@code TRUE})
output: false?

testName: generateRandomInvalidEmail_inValidallowableSpecialCharactersNumber
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: integer (546)
output: false?

testName: generateRandomInvalidEmail_inValidallowableSpecialCharactersBoolean
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: boolean (false)
output: false?

testName: generateRandomInvalidEmail_inValidallowableSpecialCharactersUndefined
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: undefined
output: false?

testName: generateRandomInvalidEmail_inValidallowableSpecialCharactersNaN
input numberOfCharactersToGenerate: integer (The number of characters to generate as an integer)
input generateSpecialCharacters: boolean (A boolean value to indicate if special characters should be included when randomly generating characters for the output string)
input allowableSpecialCharacters: NaN
output: false?

testName: generateRandomInvalidEmail_inValidAllUndefined
input numberOfCharactersToGenerate: undefined
input generateSpecialCharacters: undefined
input allowableSpecialCharacters: undefined
output: false?

testName: generateRandomInvalidEmail_inValidAllNaN
input numberOfCharactersToGenerate: NaN
input generateSpecialCharacters: NaN
input allowableSpecialCharacters: NaN
output: false?
--------------------------------------------------------------------------------generateRandomBrightColor

--------------------------------------------------------------------------------generateRandomDarkColor

--------------------------------------------------------------------------------generateRandomColor

